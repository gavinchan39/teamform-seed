
//
// How to parse parameters from URL string
// Reference: http://stackoverflow.com/questions/11582512/how-to-get-url-parameters-with-javascript/11582513#11582513
// Usage:
//   var myvar = getURLParameter('myvar');
//

function getURLParameter(name) {
  return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [null, ''])[1].replace(/\+/g, '%20')) || null;
}

//
// This function is automatically generated by the Firebase web console
// Please change this function accordingly
// Reference: https://console.firebase.google.com
//
function initializeFirebase() {
  var config = {
      apiKey: "AIzaSyDWBsNtdNcMzTLtvKEiqSHlx3eZu0RsFtY",
      authDomain: "swimcapboys.firebaseapp.com",
      databaseURL: "https://swimcapboys.firebaseio.com",
      storageBucket: "swimcapboys.appspot.com",
      messagingSenderId: "775129663322"
    };
  firebase.initializeApp(config);
}

//
// User-defined function - Useful for retrieving an object once, without 3-way sync
// For 3-way sync, use $firebaseObject or $firebaseArray provided by AngularFire
//
function retrieveOnceFirebase(firebase, refPath, callbackFunc) {
	firebase.database().ref(refPath).once("value").then(callbackFunc);
}

function onSignIn(googleUser) {
  console.log('Google Auth Response', googleUser);
  // We need to register an Observer on Firebase Auth to make sure auth is initialized.
  var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {
    unsubscribe();
    // Check if we are already signed-in Firebase with the correct user.
    if (!isUserEqual(googleUser, firebaseUser)) {
      // Build Firebase credential with the Google ID token.
      var credential = firebase.auth.GoogleAuthProvider.credential(
          googleUser.getAuthResponse().id_token);
      // Sign in with credential from the Google user.
      firebase.auth().signInWithCredential(credential).then(function(data){
        location.reload();
      }).catch(function(error) {
        // Handle Errors here.
        var errorCode = error.code;
        var errorMessage = error.message;
        // The email of the user's account used.
        var email = error.email;
        // The firebase.auth.AuthCredential type that was used.
        var credential = error.credential;
        // ...

      });

      firebase.auth().onAuthStateChanged(function(user) {
      if (user) {
        // User is signed in.
        user.providerData.forEach(function (profile) {

        var refPath;
        id = firebase.auth().currentUser.uid;

        refPath = "/users/" + id;
        // Link and sync a firebase object

          $scope[id] = $firebaseObject(firebase.database().ref(refPath));
          $scope[id].$loaded()
          .then( function(data) {
          $scope[id].name = profile.displayName;
          $scope[id].$save();
          })
          .catch(function(error) {
            // Database connection error handling...
            //console.error("Error:", error);
          });

      });
      } else {
        // No user is signed in.
      }
      });

    }
    else {
      console.log('User already sign in');
    }
  });
}


function isUserEqual(googleUser, firebaseUser)
{
  if (firebaseUser) {
    var providerData = firebaseUser.providerData;
    for (var i = 0; i < providerData.length; i++) {

      if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&
          providerData[i].uid === googleUser.getBasicProfile().getId()) {
        // We don't need to reauth the Firebase connection.
        return true;
      }
    }
  }
  return false;
}
